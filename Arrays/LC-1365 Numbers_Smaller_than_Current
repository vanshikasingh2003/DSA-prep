Question : https://leetcode.com/problems/how-many-numbers-are-smaller-than-the-current-number/description/
Solution :
Approach 1 :
class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] ans=new int[nums.length];
        for(int i=0;i<nums.length;i++){
            int counter=0;
            for(int j=0;j<nums.length;j++){
                if(nums[j] < nums[i] && j != i){
                    counter++;
                }
            }
            ans[i]=counter++;
        }
        return ans;
    }
}

Approach 2: 
Sorting: O(n log n)
Building hashmap: O(n)
Filling answer: O(n)
Total Time = O(n log n)

Extra arrays + hashmap: O(n) space

class Solution {
    public int[] smallerNumbersThanCurrent(int[] nums) {
        int[] sorted=nums.clone();
        Arrays.sort(sorted);

        Map<Integer,Integer> freq=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            freq.putIfAbsent(sorted[i], i);
        }
        int[] ans=new int[nums.length];
        for(int i=0;i<nums.length;i++){
            ans[i]=freq.get(nums[i]);
        }
        return ans;
    }
}

Things I leant :

1.putIfAbsent(key, value) means:
   If the key is not already in the map, insert (key, value).
   If the key already exists, do nothing (it wonâ€™t overwrite).
