Question : Given a list of integers, find the number(s) that appear most frequently.
Solution : 
import java.util.*;
import java.util.Scanner;

public class MyClass {
    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);
        int[] arr = {1, 2, 2, 3, 1, 4, 2, 1,1};
        List<Integer> ans = new ArrayList<>();
        Map<Integer, Integer> map = new HashMap<>();

        for (int num : arr) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        int maxFreq = 0;
        for (int value : map.values()) {
            if (value > maxFreq) {
                maxFreq = value;
            }
        }
        for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
            if (entry.getValue() == maxFreq) {
                ans.add(entry.getKey());
            }
        }
        System.out.println(ans);
        System.out.println(map);
    }
}

Things I learnt : 
1. Map vs Map.entrySetting() : 
map → The whole map object that stores the data.
map.entrySet() → A set of key-value pairs (best for iterating when you need both). 
Whats the need ? Because map itself is not a directly iterable list of key-value pairs — entrySet() breaks it down into objects that hold both the key and the value 
together, making iteration possible.

2. map.values() --> This returns a collection so we can use collection methods on it like max().
Hence, line 16-21 can be simply written as  :  int maxFreq = Collections.max(map.values());
