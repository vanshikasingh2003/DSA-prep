Question : 
Find the first missing positive integer from an unsorted array.
Input: [1, 2, 0]
Output: 3
Input: [7, 8, 9, 11, 12]
Output: 1

Solution : 
Approach 1 : HashSet Time : O(n) Space : Time : O(n)
public class MyClass {
    public static void main(String[] args) {
    int[] arr = {-2,1,6,3};
    Set<Integer> set=new HashSet<>();
    for(int num : arr){
        if(num>=1){
            set.add(num);
        } }
    for(int j=1;j<=arr.length + 1;j++){
        if(!set.contains(j)){
            System.out.println(j);
            break;
        } } } }


But what if we have to do it in Space O(1) ? 
Approach 2 : 
public class MyClass {
    public static void main(String[] args) {
        int[] arr = {3, 4, -1, 1};
        int n = arr.length;
        
        // Step 1: Place numbers at their correct position
        for (int i = 0; i < n; ) {
            if (arr[i] > 0 && arr[i] <= n && arr[i] != arr[arr[i] - 1]) {
                // swap arr[i] with arr[arr[i] - 1]
                int temp = arr[i];
                arr[i] = arr[temp - 1];
                arr[temp - 1] = temp;
            } else {
                i++;
            }
        }
        
        // Step 2: Find first index where arr[i] != i+1
        for (int i = 0; i < n; i++) {
            if (arr[i] != i + 1) {
                System.out.println(i + 1);
                return;
            }
        }
        
        // Step 3: If all are present
        System.out.println(n + 1);
    }
}
